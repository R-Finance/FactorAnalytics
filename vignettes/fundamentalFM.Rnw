\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage{amsmath}
\usepackage{amsthm}
% \VignetteIndexEntry{test file}
% \VignetteKeywords{facor model, risk analytics}

\begin{document}
\SweaveOpts{concordance=TRUE}

\title{factorAnalytics: A Concise User Guide}
\author{Yi-An Chen}
\maketitle

\section{Introduction}
This vignette aims to help users learn how to use \verb@factorAnalytics@ package. It provides a few examples covering data input, factor model estimation, risk decomposition and performance attribution. 

\section{Factor Model}
A factor model is defined as following:\\
\begin{equation} 
 r_t = bf_t + \epsilon_t\;,t=1 \cdots T \label{fm} 
\end{equation}
Where $r_t$ is N x 1 vector of exress returns, b is N x K matrix of factor loadings and f is K x 1 vector of common risk factor. N is numbers of assets and K is numbers of factors. b stands for factor exposures or factor loadings. factor loading b can be time-varying $b_t$ in fundamental factor model. $\epsilon_t$ is assumed serial uncorrelated but maybe cross-correlated in some models. Factor model is useful to fit asset pricing model, for example, the famous CAPM (Capital Assets Pricing Model) is a factor model which contains only one factor and that factor is excess market returns.

\verb@factorAnalytics@ package provides 3 different kinds of factor models. They are fundamental factor model, statistical factor model and time series factor model. 


\subsection{Fundamental Factor Model}

In the case of fundamental factor model, factor exposures are time-varying and stand for assets characteristics or fundamentals, such as market capitalization, book-to-market ratio, industry indicator and so on . That is to say, $b_t$ is known and $f_t$ is unknown. Estimation of factor returns $f_t$ can be done by running cross-section OLS or WLS regression in each time period t. In specific: 
\begin{equation}\label{ffm}
r_t = f_M + b_t\hat{f_t} + \hat{\epsilon_t}\;,t=1 \cdots T 
\end{equation}
$f_M$ is the market factor or world factor depending on the asset space. The former is of the country level and the later is of the global level. Econometrically, it is an intercept term of each cross-sectional regression.

This approach is also known as BARRA type approach. The famous Barra global equity model (GEM3) contains more than 50 factors. 

\subsection{Example 1}
The first example in this section will use firm fundamental such as market cap and book-to-market ratio.
\subsubsection{Loading Data}
Let's look at the arguments of \verb@fitFundamentalFactorModel()@. It is the function which will estimate fundamental factor model in \verb@factorAnalytics@.
<<args>>=
library(factorAnalytics)
args(fitFundamentalFactorModel)
@
\verb@data@ is in class of \verb@data.frame@ and is required to specify \emph{assetvar}, \emph{returnvar} and \emph{datevar}. The \emph{data} is a panel data so the firm variables and the time variable are required for \verb@fitFundamentalFactorModel()@. 

In this example, the data is downlaoded from CRSP/Compustat quarterly fundamental and named \verb@equity@. It contains 67 stocks and 106 time period from January 2000 to December 2013.  

<<loading.data>>=
#equity <- data(equity)
equity <- read.csv(file="equity.csv")
names(equity)
length(unique(equity$datadate)) # number of period t 
length(unique(equity$tic)) # number of assets
@
To calculate asset returns, I use \verb@Delt()@  in \verb@quantmod@ package to calculate price percentage change. 
<<get.returns>>=
library(quantmod)   # for Delt. See Delt for detail
equity <- cbind(equity,do.call(rbind,lapply(split(equity,equity$tic), 
                                            function(x) Delt(x$PRCCQ)))) 
names(equity)[22] <- "RET"
@
The next step is to construct market capitalization and book-to-market ratio. They will be the factor loadings for \verb@fitFundamentalFactorModel()@ in our example. Market cap can be calculated by multiplying shares of common stocks outstanding with price and book value is the common/ordinary equity value. Nnatrual log is treated for market cap. 
<<get.mv.bm>>==
equity$MV <- log(equity$PRCCQ*equity$CSHOQ) 
equity$BM <- equity$CEQQ/equity$MV
@

We will get an error message if \verb@datevar@ is not \verb@as.Date@ format compatible. In our example, our date variable is \emph{DATACQTR}. It reads as "2000Q1". We have to convert it to \verb@as.Date@ compatible. We can utilize \verb@as.yearqtr@ in \verb@xts@ package to do it. Also, we will use character string for asset variable instead of factor class.\footnote{The best data input is to convert all your data into xts class since we use xts to compute everything in this package.}
<<as.yearqtr>>=
a <- unlist( lapply(strsplit(as.character(equity$DATACQTR),"Q"),
               function(x)  paste(x[[1]],"-",x[[2]],sep="") ) )
equity$yearqtr <- as.yearqtr(a,format="%Y-%q")
equity$tic <- as.character(equity$tic)
equity <- subset(equity,yearqtr != "2000 Q1") # delete the first element of each assets
@

\subsubsection{Fit the Model}
The following codes will fit the fundamental factor model:
<<fit.ffm>>=
fit.fund <- fitFundamentalFactorModel(exposure.names=c("BM","MV"),datevar="yearqtr",
                                      returnsvar ="RET",assetvar="tic",wls=TRUE,
                                      data=equity)
names(fit.fund)
@

A few notice for fitting fundamental factor model: So far this function can only deal with balanced panel because we want to extract return covariance and residuals and so on. Second, \verb@datevar@ has to be \verb@as.Date@ compatible, otherwise the function can not read time index. It is somehow inconvenient but it makes sure time index is not messed up. 

Default fitting method for \verb@fitFundamentalFactorModel()@ is classic OLS. The covariance matrix is also fit with classic covariance matrix defined by \verb@covClassic()@ in \verb@robust@ package. One can also use robust estimation by using argument \verb@regression = "robust"@ and robust covariance matrix estimation by using \verb@covariance = "robust"@


\verb@returns.cov@ contains information about returns covariance. That is :  
\[ \Sigma_x = B \Sigma_f B' +  D \]
If \verb@full.resid.cov@ is \emph{FALSE}, D is a diagonal matrix with variance of residuals in diagonal terms. If \emph{TRUE}, D is a covariance matrix of residuals. 

<<fit.fund>>=
names(fit.fund$returns.cov)
@
For more information about covariance, please check out \verb@fit.fund$factor.cov@, \verb@fit.fund$resids.cov@ and \verb@fit.fund$resid.variance@ for detail. 


factor returns, residuals,t-stats are of \verb@xts@ class. 
<<factor.return,results=hide>>=
fit.fund$factor.returns
fit.fund$residuals
fit.fund$tstats
@

Output of \verb@fitFundamentalFactorModel()@ is of class \emph{FundamentalFactorModel}. Generic function \verb@predict@, \verb@summary@, \verb@print@ and \verb@plot@ can be applied to the output. 
<<generic.fun,results=hide>>=
summary(fit.fund)
predict(fit.fund)
print(fit.fund)
@

If \emph{newdata} is not specified in \verb@predict()@, fitted value of fundamental factor model will be shown, otherwise, predicted value will be shown. 

\verb@plot()@ method has several option to choose, 
\begin{verbatim}
> plot(fit.fund)
Factor Analytic Plot 
Make a plot selection (or 0 to exit):
 

1: Factor returns
2: Residual plots
3: Variance of Residuals
4: Factor Model Correlation
5: Factor Contributions to SD
6: Factor Contributions to ES
7: Factor Contributions to VaR

Selection: plot(fit.fund)
Enter an item from the menu, or 0 to exit
\end{verbatim}

For example, choose 1 will give users factor returns as shown in the Figure \ref{fig1}
<<label=plot.fit.fund,fig=TRUE,echo=FALSE,include=FALSE,results=hide>>=
plot(fit.fund,which.plot=1,max.show=3)
@

\begin{figure}
\begin{center}
<<label=fig1,fig=TRUE,echo=FALSE>>=
<<plot.fit.fund>>
@
\end{center}
\caption{Time Series of factor returns}
\label{fig1}
\end{figure}

\subsection{Example 2: Barra type industry/country model}
This example shows how to estimate BARRA tyipe industry/country model. Modelers use industry/country dummies in a specific country equity model or a global equity model. In this example, I have 63 stocks in the US equity market, so it is a BARRA industry model. In specific: 
\begin{equation}
x_{it} = \Sigma_{j=1}^{J}b_{i,j}f_{i,t} + \epsilon_{i,t},\;for\,each\,i\,,t
\end{equation}
where $b_{i,j} = 1$ if stock i in industry j and $b_{i,j}=0$, otherwise. 
In matrix form:\[ x_t = Bf_t + \epsilon_t \] and B is the N X J matrix of industry dummies.  

\emph{SPCINDCD} in our \verb@equity@ dataset contains $S\&P$ industry codes. \verb@fitFundamentalFactorModel()@ will fit Barra type industry model if \verb@exposure.names@ is equal to \emph{SPCINDCD}. Be sure this variable is of class \emph{character} but not \emph{numeric}. Otherwise the function will not create dummies.

<<ind.model>>=
equity$SPCINDCD <- as.character(equity$SPCINDCD)
fit.ind <- fitFundamentalFactorModel(exposure.names=c("SPCINDCD"),datevar="yearqtr",
                                      returnsvar ="RET",assetvar="tic",wls=FALSE,
                                     data=equity)
@

\verb@fitFundamentalFactorModel()@ also supports mixed model which uses industry/country dummy factor exposures and style factor exposures together. For example :
<<mixted,results=hide>>=
fit.mix <- fitFundamentalFactorModel(exposure.names=c("BM","MV","SPCINDCD"),
                                     datevar="yearqtr",returnsvar ="RET",
                                     assetvar="tic",wls=FALSE,data=equity)
@


\subsubsection{Standardizing Factor Exposure}
It is common to standardize factor exposures by assigning appropriate weights so that factor loadings are mean 0 and standard deviation equal to 1. The weight are often proportional to square root of market capitalization, although other weighting schemes are possible. 

Let's redo the example 1 with standardized factor exposures with square root of market capitalization. In order to do that, we create a weighting variable first.

<<standardized.fund>>=
equity$weight <- sqrt(exp(equity$MV)) # we took log for MV before.
@
We can choose \verb@standardized.factor.exposure@ to be \verb@TRUE@ and \verb@weight.var@ equals to weighting variable. 
<<s.fit>>=
fit.fund2 <- fitFundamentalFactorModel(exposure.names=c("BM","MV"),
                                     datevar="yearqtr",returnsvar ="RET",
                                     assetvar="tic",wls=TRUE,data=equity,
                                     standardized.factor.exposure = TRUE,
                                       weight.var = "weight"  )
@

The advantage of standardizing facotr exposures is the better interpretation of factor returns. $f_t$ can be interpreted as long-short zero investment portfolio. In our case, $f_{MV,t}$ is the long short portfolio returns which long big size stocks and short small size stocks. 

\subsection{Statistical Factor Model}

In statistical factor model, neither factor loading b nor factor returns $f_t$ are observed in equation \ref{fm}. So we can rewrite the model as:
\begin{equation} 
 r_t = bf_t + \epsilon_t\;,t=1 \cdots T \label{fm2} 
\end{equation}
Factor returns $f_t$ can be calculated as principle components of covariance matrix of assets returns if number of asset N is less than the number of time period T, and factor loadings can be calculated using conventional least square technique. 

The first principle component or factor will explain the most variation of returns covariance matrix. The second priciple component will explain the most variation controlling for the first one and so on.

In some cases, when number of assets N is larger than number of time period T. Connor and Korajczyk (1986) develop an alternative method called asymptotic principal components analysis, related to the approximate factor model theory of Chamberlain and Rothschild (1983). Connor and Korajczyk analyze the eigenvector of the T X T cross product of  matrix returns rather then N X N covariance matrix of returns. They show the first k eigenvectors of this cross product matrix provide consistent estimates of the k X T matrix of factor returns. 

We can use function \verb@fitStatisticalFactorModel@ to fit statistical factor model. Asset returns have to be in time series or xts class. We choose xts to work with in this example because time index is easy to handle. 

<<create.xts>>=
library(xts)
tic <- unique(equity$tic)
ret <- xts(NA,as.yearqtr("2000 Q2",format="%Y Q%q"))
for (i in tic) {
temp <- subset(equity,tic == i)
ret.new <- xts(temp$RET,as.yearqtr(temp$yearqtr))
names(ret.new) <- i
ret <- merge(ret,ret.new)
}
ret <- ret[,-1]
dim(ret)
@
The data \verb@ret@ contians 63 assets and 52 time periods. We will exploit asymptotic principal components analysis to fit statistical model. There are two tests to determine numbers of factors, Connor and Korajczyk(1995) and Bai and Ng (2002). Both are provided in our function. We will use Bai and Ng (2002) to choose the numbers of factors.    

<<stat.fm>>=
fit.stat <- fitStatisticalFactorModel(data=ret,
                                      k= "bn")
names(fit.stat)
@

5 factors is chosen by Bai and Ng (2002). Factor returns can be found in \verb@fit.stat$factors@.    
<<stat.factor.returns>>=
fit.stat$k
@
We can plot factor returns with generic function \verb@plot@. 
<<label=plot.fit.stat,fig=TRUE,echo=FALSE,include=FALSE,results=hide>>=
plot(fit.stat,which.plot=2)
@

\begin{figure}
\begin{center}
<<label=fig2,fig=TRUE,echo=FALSE>>=
<<plot.fit.stat>>
@
\end{center}
\caption{Time Series of statistical factor returns}
\label{fig2}
\end{figure}

Finally, screen plot of eigenvalues shows how much variation can be explained by factors. We can see the first factor explain more than 70 percent of variation of asset returns.   
<<label=plot.fit.stat2,fig=TRUE,echo=FALSE,include=FALSE,results=hide>>=
plot(fit.stat,which.plot=1)
@

\begin{figure}
\begin{center}
<<label=fig3,fig=TRUE,echo=FALSE>>=
<<plot.fit.stat2>>
@
\end{center}
\caption{Screen Plot of Eigenvalues}
\label{fig3}
\end{figure}

Similar to \verb@fitFundamentalFactorModel@, generic functions like \verb@summary@, \verb@print@, \verb@plot@ and \verb@predict@ can be used for statistical factor model. 

\subsection{Time Series Factor Model}
In Time Series factor model, factor returns $f_t$ is observed and is taken as macroeconomic time series like GDP growth rate or other finanical time series such as market returns or credit spread. In our package, we provid some common used times series in data set \verb@CommonFactors@. \verb@factors@ is monthly time series and \verb@factors.Q@ is quarterly time series.

<<common.factors>>=
data(CommonFactors)
names(factors.Q)
@

Let's combine these factors with our data \verb@ret@ and delete NA values.

<<merge>>=
ts.factors <- xts(factors.Q,as.yearqtr(index(factors.Q),format="%Y-%m-%d")) 
ts.data <- na.omit(merge(ret,ts.factors))
@

In this example, we will use SP500, 10 years and 3 months term spread and difference of VIX as our common factors. 

<<fit.ts>>=
fit.time <- fitTimeSeriesFactorModel(assets.names=tic,
                                     factors.names=c("SP500","Term.Spread","dVIX"),
                                     data=ts.data,fit.method="OLS")
@

\verb@asset.fit@ can show model fit for each assets, for example for asset \verb@AA@. 
<<single.asset.fit>>=
fit.time$asset.fit$AA
@


\verb@fitTimeSeriesFactorModel@ also have various variable selection algorithm to choose. One can include all possible factors and let the function to decide which one is the best model. For example, we include every common factors and use method \verb@stepwise@ which utilizes \verb@step@ function in \verb@stat@ package 

<<fit.ts>>=
fit.time2 <- fitTimeSeriesFactorModel(assets.names=tic,
                                      factors.names=names(ts.factors),
                                      data=ts.data,fit.method="OLS",
                                      variable.selection = "stepwise")
@
There are 5 factors chosen for asset AA for example. 
<<AA.fit>>=
fit.time2$asset.fit$AA
@

Generic functions like \verb@summary@, \verb@print@, \verb@plot@ and \verb@predict@ can also be used for time series factor model as previous section.

\section{Risk Analysis}

\subsection{Factor Model Risk Budgeting}
One can perform risk analysis with factor model. Meucci (2007) shows factor model can be represented as: 

\begin{align}
r_{it} &= \alpha_i + \beta_{i1}f_{1t} + \beta_{i2}f_{2t} + \cdots + \beta_{ik}f_{kt} + \sigma_{i}z_{it},\;i=1 \cdots N,\;t=1 \cdots T \\
       &= \alpha_i + \tilde{\beta_i}'\tilde{F_t}
\end{align}

where $z_{it}$ is the standardized residuals and $\epsilon_{it} / \sigma_i = z_{it}$, $\tilde{\beta_i} = [\beta_{1i},\dots,\beta_{ki}, \sigma_i]$, $\tilde{F_t}=[f_{1t},\dots,f_{kt}, z_{it}]$  

Common risk measures like standard deviation, value-at-risk and expected shortfall are function of homogeneous of degree 1. By Euler theoreom, risk metrics (RM) can be decomposed to 
\begin{align}
RM_i = \beta_{1i}\frac{\partial RM_i}{\partial \beta_{1i}} + \beta_{2i}\frac{\partial RM_i}{\partial \beta_{2i}} + \cdots + \beta_{ki}\frac{\partial RM_i}{\partial \beta_{ki}} + \sigma_{i}\frac{\partial RM_i}{\partial \sigma_{i}}
\end{align}

where\\
$\frac{\partial RM_i}{\partial \beta_{ki}}$ is marginal contribution of factor k to $RM_i$. $\beta_{ki}\frac{\partial RM_i}{\partial \beta_{ki}}$ is component contribution of factor k to $RM_i$ and $\beta_{ki}\frac{\partial RM_i}{\partial \beta_{ki}}/RM_i$ is percentage contribution of factor k to $RM_i$

\verb@factorAnalytics@ package provide 3 different risk metrics decomposition, Standard deviation (Std), Value-at-Risk (VaR) and Expected Shortfall (ES). Each risk metric supports different estimation methods under different distribution such as empirical distribution, Normal distribution and Cornish-Fisher distribution. 

This example shows factor model VaR decomposition with Normal distribution of asset AA for a statistical factor model.
<<risk.decomp>>=
data.rd <- cbind(ret[,"AA"],fit.stat$factors,
                 fit.stat$residuals[,"AA"]/sqrt(fit.stat$resid.variance["AA"]))
var.decp <- factorModelVaRDecomposition(data.rd,fit.stat$loadings[,"AA"],
                            fit.stat$resid.variance["AA"],tail.prob=0.05,
                             VaR.method="gaussian")
names(var.decp)
@

VaR, number of exceed, index of observations that exceed VaR, marginal contribution to VaR, component contribution to VaR and percentage contribution to VaR are computed. Let's see VaR and component contribution to VaR; 
<<mct.var>>=
var.decp$VaR.fm
var.decp$cVaR.fm
@
It looks like the second factor contributes the largest risk to asset AA. 

One can use \verb@plot()@ method to see barplot of risk budgeting. The default is to show 6 assets. Figure \ref{fig4} shows componenet contribution to VaR for several different assets. 

<<label=plot.rb.stat,fig=TRUE,echo=FALSE,include=FALSE,results=hide>>=
plot(fit.stat,which.plot=8,legend.text=TRUE, args.legend=list(x="topright"),
     VaR.method="gaussian")
@

\begin{figure}
\begin{center}
<<label=fig4,fig=TRUE,echo=FALSE>>=
<<plot.rb.stat>>
@
\end{center}
\caption{Component Contribution to VaR for Statistical Factor Model. }
\label{fig4}
\end{figure}

\subsection{Portfolio Risk Budgeting}

Let $Rp_t = Rp_t(w)$ denote the portfolio return based on the vector of portfolio weights w. Let RM(w) denote a portfolio risk measure. 

\begin{align}
RM = w_{1}\frac{\partial RM}{\partial w_{1}} + w_{2}\frac{\partial RM}{\partial w_{2}} + \cdots + w_{N}\frac{\partial RM}{\partial w_{N}}
\end{align}

where\\
$\frac{\partial RM}{\partial w_{i}}$ is marginal contribution of asset i to RM. $w_{i}\frac{\partial RM}{\partial w_{i}}$ is component contribution of asset i to RM. $w_{i}\frac{\partial RM}{\partial w_{i}}/RM$ is percentage contribution of asset i to RM.

we can use function \verb@VaR()@ in \verb@PerformanceAnalytics@ to perform portfolio risk budgeting. Suppose we have an eqaully weighted portfolio of 63 assets in data set \verb@ret@. The following code can compute portfolio VaR, component contribution to VaR and percentage contribution to VaR

<<port.var,results=hide>>=
VaR(R=ret,method="gaussian",portfolio_method="component")
@


\section{Performance Attribution}

Users can perform factor-based performance attribution with \verb@factorAnalytics@ package. factor model:
\begin{equation}
r_t = \alpha + Bf_t + e_t,\;t=1 \cdots T
\end{equation}
Factor model breaks asset returns into two pieces. The first term is \emph{returns atttributed to factors} $Bf_t$ and the second term is called \emph{specific returns} which is simply $\alpha + e_t$. 

For the example of time series factor model, function \verb@factorModelPerformanceAttribution()@ calculates performance attribution. 
<<ts.attr>>=
ts.attr <- factorModelPerformanceAttribution(fit.time)
names(ts.attr)
@
There are 3 outputs generated by this function. \verb@cum.ret.attr.f@ will return a N x K matrix of cummulative returns attributed to factors. \verb@cum.spec.ret@ will return a N x 1 matrix of cummulative specific returns. \verb@attr.list@ will return a list which contains returns atttribution to each factors and specific returns asset by asset. In addition, a \emph{FM.attribution} class will be generated and generic function \verb@print()@, \verb@summary()@ and \verb@plot()@ can be applied to it.  

\subsection{Benchmark and Active Returns}

Portfolio performance is usually compared to similar type of benchmark. US equity portfolio will compare its performance with S$\&$P 500 index for example. Therefore, \emph{active returns} under active management is interested. We define active returns = assets returns - benchmark. 

We can also calculate active return attribution by fitting active return with fundamental factor model, statistical factor model or time series factor model first, and then using \verb@factorModelPerformanceAttribution()@. 
\end{document}